<Window x:Class="MouseMovements.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ViewModel="clr-namespace:MouseMovements.ViewModel"
        xmlns:Model="clr-namespace:MouseMovementsDLL;assembly=MovementMouseDLL"

        xmlns:ii="http://schemas.microsoft.com/xaml/behaviors"

        xmlns:local="clr-namespace:MouseMovements"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" WindowState="Maximized" ResizeMode="NoResize" ScrollViewer.VerticalScrollBarVisibility="Disabled" WindowStyle="None">
    <Window.InputBindings>
        <KeyBinding Command="{Binding StopExecuting}" Key="Esc"/>
       

    </Window.InputBindings>
    <Window.DataContext>
        <ViewModel:MainWindowViewModel/>
    </Window.DataContext>
    <ii:Interaction.Triggers>
        <ii:EventTrigger EventName="MouseMove">
            <ii:InvokeCommandAction Command="{Binding MouseMoving}" />
        </ii:EventTrigger>
    </ii:Interaction.Triggers>
    <Window.Resources>
        <Style TargetType="{x:Type TextBox}" x:Key="TextBoxStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border CornerRadius="5"
                            Background="{TemplateBinding Background}">
                            <TextBox Text="{Binding NameOfUser}"
                             Visibility="{TemplateBinding Visibility}"
                             VerticalContentAlignment="Center" 
                             Padding="5 0 5 0"
                             />
                        </Border>
                        <ControlTemplate.Triggers>
                            
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                
            </Style.Triggers>
        </Style>
     
        <Style TargetType="{x:Type Button}" x:Key="StyleButtonMain">
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="Width" Value="170"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Margin" Value="15"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="5"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="Center"
                             VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#bdc3c7"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#7f8c8d"/>
                    <Setter Property="Foreground" Value="#bdc3c7"/>
                    <Setter Property="BorderBrush" Value="#bdc3c7"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="StyleButton">
            <Setter Property="Background" Value="Black"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="Width" Value="120"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Margin" Value="10 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="5"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="Center"
                             VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#7f8c8d"/>
                    <Setter Property="Foreground" Value="#bdc3c7"/>
                    <Setter Property="BorderBrush" Value="#bdc3c7"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="StyleButtonRandom">
            <Setter Property="Background" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="5"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="Center"
                             VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#7f8c8d"/>
                    <Setter Property="Foreground" Value="#bdc3c7"/>
                    <Setter Property="BorderBrush" Value="#bdc3c7"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#bdc3c7"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.Style>
            <Style TargetType="Grid">
                <Setter Property="Background" Value="Transparent" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsBackgroundVisible, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Value="True">
                        <Setter Property="Background">
                            <Setter.Value>
                                <ImageBrush ImageSource="/Images/bgSimulator.png"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Grid.Style>
        <Grid.RowDefinitions>
            <RowDefinition Height="10*"/>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <!-- Mouse Path for Original Path-->
        <ItemsControl Visibility="{Binding ShowAllLines, UpdateSourceTrigger=PropertyChanged}" Grid.RowSpan="1" ItemsSource="{Binding CollectionMousePath}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas Width="{Binding ScreenWidth}" Height="{Binding ScreenWidth}"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Canvas>
                        <Ellipse Fill="Purple" Width="10" Height="10" Canvas.Top="{Binding Y, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding X, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                    </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <!---->
        <!--  Mouse Path for Rotated Path -->
        <ItemsControl Visibility="{Binding ShowAllLines, UpdateSourceTrigger=PropertyChanged}" Grid.RowSpan="1" ItemsSource="{Binding RotatedCollection}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas Width="1920" Height="1280"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Canvas>
                        <Ellipse Fill="Yellow" Width="10" Height="10" Canvas.Top="{Binding Y, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding X, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                    </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <!---->
        <ItemsControl Grid.RowSpan="1" ItemsSource="{Binding ScaledCollection, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas Width="1920" Height="1280"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Canvas>
                        <Ellipse Fill="Black" Width="10" Height="10" Canvas.Top="{Binding Y, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding X, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                    </Canvas>
                    <!--<Rectangle Width="10" Height="10" Fill="Black" Canvas.Left="100" Canvas.Top="200"/>-->
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <!--  Mouse Path for Translated Path -->
        <ItemsControl Visibility="{Binding ShowAllLines, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Grid.RowSpan="1" ItemsSource="{Binding TranslatedCollection}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas Width="1920" Height="1280"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Canvas>
                        <Ellipse Fill="Green" Width="10" Height="10" Canvas.Top="{Binding Y, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding X, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                    </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <!---->
        <StackPanel Grid.RowSpan="2" Visibility="{Binding EnterVisibility, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Width="300px" Height="170" Orientation="Vertical" Grid.ColumnSpan="2">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" FontSize="20">Insert Name</TextBlock>
            <TextBox Height="50" Padding="5" VerticalContentAlignment="Center" FontSize="20" Margin="0 20 0 0" Style="{StaticResource ResourceKey=TextBoxStyle}" Text="{Binding NameOfUser, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"></TextBox>
            <Button Content="Submit" Command="{Binding InsertName}" Style="{StaticResource ResourceKey=StyleButtonMain}"></Button>
        </StackPanel>

        <StackPanel Visibility="{Binding ShowMainUserControl, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Orientation="Vertical">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="350"/>
                    <ColumnDefinition Width="500"/>
                </Grid.ColumnDefinitions>
            </Grid>
            <Canvas>
                <Button Command="{Binding ClickButton}" Width="{Binding BtnWidth, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Height="{Binding BtnHeight, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource ResourceKey=StyleButtonRandom}"
               Canvas.Top="{Binding BtnCurrentPositionY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding BtnCurrentPositionX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                </Button>
            </Canvas>
            <!--<Canvas>
                <Button Width="30" Height="20" Background="Red" Canvas.Top="{Binding TestNew.Y, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Canvas.Left="{Binding TestNew.X, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                </Button>
            </Canvas>-->
        </StackPanel>
        <StackPanel Visibility="{Binding ShowMainUserControl, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Button Style="{StaticResource ResourceKey=StyleButton}" Content="{Binding RecordBtn, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Command="{Binding StartRecording}"/>
            <!--<Button Style="{StaticResource ResourceKey=StyleButton}" Content="Playback" Command="{Binding PlayLastSaved}"/>-->
            <!--<Button Content="Get Random" Width="110" Height="40" Margin="10 0" Command="{Binding GetRandom}"/>-->
            <!--<Button Content="Test" Width="110" Height="40" Margin="10 0" Command="{Binding Test}"/>-->
            <Button Style="{StaticResource ResourceKey=StyleButton}" Content="Settings"  Command="{Binding SettingsOpen}"/>
            <Button Style="{StaticResource ResourceKey=StyleButton}" Content="{Binding SimulateTxtBtn, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Command="{Binding MoveMouse}"/>
            <!--
            <Button Content="GetLast" Width="110" Height="40" Margin="10 0" Command="{Binding GetLast}"/>
            <Button Content="Rotate" Width="110" Height="40" Margin="10 0" Command="{Binding Rotate}"/>
            <Button Content="Scale" Width="110" Height="40" Margin="10 0" Command="{Binding Scale}"/>
            <Button Content="Translate" Width="110" Height="40" Margin="10 0" Command="{Binding Translate}"/>
            -->

        </StackPanel>
        <StackPanel Visibility="{Binding ShowMainUserControl, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Grid.Row="2">
            <Slider Width="400" Minimum="0.25" AutoToolTipPlacement="TopLeft" AutoToolTipPrecision="2" IsMoveToPointEnabled="True" IsSnapToTickEnabled="True" Maximum="10" TickFrequency="0.25" Value="{Binding SliderValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" TickPlacement="BottomRight"  Ticks="0.25,0.5, 1, 1.5, 2, 5, 10"/>
            <TextBlock HorizontalAlignment="Center" Text="{Binding SliderValue}"></TextBlock>
        </StackPanel>
        
    </Grid>
</Window>
